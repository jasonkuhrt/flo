
[36mflo
(B[m
Create worktree from branch or GitHub issue

[2m[30mCOMMANDS
(B[m  flo        Create worktree from branch or GitHub issue
  list       List all git worktrees with branches and paths
  prune      Clean up Git metadata for manually deleted worktrees
  rm         Safely remove a git worktree by branch name or issue number

[2m[30mOPTIONS
(B[m  -h, --help       Show this help message
  -v, --version    Show version information

[2m[30mPOSITIONAL PARAMETERS
(B[m  <issue-or-branch>    GitHub issue number or branch name (optional - shows interactive picker if omitted)

[2m[30mWORKTREE ORGANIZATION
(B[m
  Flo creates worktrees as siblings to your main project:
    ~/projects/myproject/                      (main repo on main branch)
    ~/projects/myproject_feat-123-add-auth/    (worktree for feat/123-add-auth)
    ~/projects/myproject_fix-456-bug-fix/      (worktree for fix/456-bug-fix)

  Running flo multiple times for the same branch is safe - it updates Claude context without recreating the worktree.


[2m[30mINTERACTIVE SELECTION
(B[m
  When you run 'flo' with no arguments:
    1. Fetches up to 100 open issues from GitHub
    2. Shows interactive picker:
         - Uses 'gum filter' (fuzzy search) for >10 issues
         - Uses 'gum choose' (simple list) for â‰¤10 issues
    3. Creates worktree for selected issue

  Requirements:
    - gum: https://github.com/charmbracelet/gum (install with: brew install gum)
    - gh CLI: https://cli.github.com (install with: brew install gh)

  Fallback: If gum or gh are not installed, shows help message instead.


[2m[30mBRANCH MODE
(B[m
  When you run 'flo <branch-name>':
    1. Creates worktree with the exact branch name you provide
    2. No GitHub integration (no issue fetching, no auto-assign)
    3. No Claude context files generated
    4. Perfect for: experiments, quick fixes, non-issue work

  Examples:
    flo feat/experiment        # Creates feat/experiment branch
    flo fix/quick-bug          # Creates fix/quick-bug branch
    flo spike/new-tech         # Creates spike/new-tech branch


[2m[30mISSUE MODE
(B[m
  When you run 'flo 123':
    1. Fetches issue #123 from GitHub
    2. Auto-assigns issue to you
    3. Creates branch with smart prefix:
         feat/123-<title> for features
         fix/123-<title> for bugs
         docs/123-<title> for documentation
         refactor/123-<title> for refactoring
         chore/123-<title> for chores
    4. Creates worktree: ../<project>_<branch>/
    5. Copies Serena MCP cache if present (speeds up symbol indexing)
    6. Sets up .claude/CLAUDE.md (one-time)
    7. Generates .claude/CLAUDE.local.md with issue context
    8. Runs pnpm install
    9. Ready to code!


[2m[30mCLAUDE INTEGRATION
(B[m
  When you create a worktree from an issue, flo uses a two-file system:

  .claude/CLAUDE.md (one-time):
    - Instructs Claude to read .claude/CLAUDE.local.md
    - Prepended to existing CLAUDE.md if present
    - Committed to your repo

  .claude/CLAUDE.local.md (per-issue):
    - Overwritten each run with issue context
    - Gitignored - never committed
    - Worktree-specific


[2m[30mSERENA MCP INTEGRATION
(B[m
  If you're using Serena MCP (github.com/oraios/serena) for semantic code analysis:
    - Flo automatically copies .serena/cache/ to new worktrees
    - Avoids re-indexing symbols (can save minutes on large projects)
    - Only happens when creating new worktrees (not when reusing)
    - Requires .serena/cache/ to exist in your main project
    - Pre-index once: uvx --from git+https://github.com/oraios/serena serena project index
